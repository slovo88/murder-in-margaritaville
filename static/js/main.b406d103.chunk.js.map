{"version":3,"sources":["services/firebase/index.js","components/EnterUserCode.js","components/Survey.js","components/Accused.js","components/Voted.js","components/UserView.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","EnterUserCode","loadUser","useState","userCode","setUserCode","errorMessage","setErrorMessage","submit","e","preventDefault","className","onSubmit","htmlFor","id","name","type","onChange","target","value","trim","onClick","database","Survey","userData","userList","accusedUserCode","setAccusedUserCode","charName","map","user","accusedName","find","window","confirm","ref","transaction","currentVotes","set","Accused","accusedResults","setAccusedResults","useEffect","on","snapshot","mappedResults","votes","val","style","width","display","textAlign","minHeight","paddingLeft","Voted","setShowVoted","position","top","left","right","bottom","backgroundColor","hasSubmittedSurvey","player","votedFor","UserView","setIsLoading","showVoted","setUserList","once","Object","values","newValue","uid","App","isLoading","hasUser","setHasUser","setUserData","setErrorCallback","userValue","localStorage","setItem","localStorageUserId","getItem","removeItem","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b406d103.chunk.js","sourcesContent":["import firebase from 'firebase'\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA95zD0SRNV7xA6OdOIq3kne6i4vFmQNZQ\",\n  authDomain: \"murder-mystery-pemo.firebaseapp.com\",\n  databaseURL: \"https://murder-mystery-pemo.firebaseio.com\",\n  projectId: \"murder-mystery-pemo\",\n  storageBucket: \"murder-mystery-pemo.appspot.com\",\n  messagingSenderId: \"588260667602\",\n  appId: \"1:588260667602:web:4e7937be0264c03a8b3d0b\",\n  measurementId: \"G-MX55724GKS\"\n}\n\nfirebase.initializeApp(firebaseConfig)\n\nexport default firebase","import React, { useState } from 'react'\n\n\nexport default function EnterUserCode({ loadUser }) {\n  const [ userCode, setUserCode ] = useState('')\n  const [ errorMessage, setErrorMessage ] = useState('')\n\n  function inputChange(e) {\n    setUserCode(e.target.value.trim())\n    \n    if (errorMessage) {\n      setErrorMessage('')\n    }\n  }\n\n  function submit(e) {\n    if (e) {\n      e.preventDefault()\n    }\n\n    loadUser(userCode, setErrorMessage)\n  }\n\n  return (\n    <>\n      {\n        errorMessage && \n        <p className=\"error-message\">{errorMessage}</p>\n      }\n      <form onSubmit={submit}>\n        <label htmlFor=\"user-code\">Enter code:</label>\n        <input id=\"user-code\" name=\"user-code\" type=\"text\" onChange={inputChange}/>\n      </form>\n      <button onClick={submit}>Submit</button>\n    </>\n  )\n}","import React, { useState } from 'react'\nimport { firebase } from '../services'\n\nconst database = firebase.database()\n\n\nexport default function Survey({ userData, userList }) {\n  const [ accusedUserCode, setAccusedUserCode ] = useState('')\n  const [ errorMessage, setErrorMessage ] = useState('')\n\n  function submitAccusation() {\n    if (!accusedUserCode) {\n      setErrorMessage('Please accuse someone before submitting')\n      return\n    }\n\n    const accusedName = userList.find((user) => user.userCode === accusedUserCode).charName\n    const confirmChoice = window.confirm(`Are you sure you want to accuse ${accusedName}?`)\n\n    if (confirmChoice) {\n      const ref = database.ref(`accusations/${accusedUserCode}`);\n      ref.transaction((currentVotes) => {\n        return (currentVotes || 0) + 1;\n      });\n      \n      database.ref(`users/${userData.userCode}/hasSubmittedSurvey`).set(true)\n      database.ref(`users/${userData.userCode}/votedFor`).set(accusedName)\n    }\n  }\n\n  return (\n    <>\n      <h1>So, {userData.charName}, whodunnit?</h1>\n      <p className=\"error-message\">{errorMessage}</p>\n      <form className=\"radio-form\" onChange={(e) => setAccusedUserCode(e.target.value)}>\n        { userList.map((user) => {\n            if (userData.userCode === user.userCode) {\n              return;\n            }\n            return (\n              <>\n                  <input type=\"radio\" id={user.userCode} name=\"accuse\" value={user.userCode} />\n                  <label htmlFor={user.userCode}>{user.charName}</label>\n                  <br/>\n              </>\n            )\n          })\n        }\n      </form>\n\n      <button onClick={submitAccusation}>Submit</button>\n    </>\n  )\n}","import React, { useEffect, useState} from 'react'\nimport { firebase } from '../services'\n\nconst database = firebase.database()\n\n\nexport default function Accused({ userList }) {\n  const [ accusedResults, setAccusedResults] = useState([])\n\n  useEffect(() => {\n    database.ref('accusations').on('value', (snapshot) => {\n      const mappedResults = userList.map((user) => {\n        const { charName, userCode } = user\n        const votes = snapshot.val()[userCode]\n\n        return {\n          charName,\n          votes\n        }\n      })\n\n      setAccusedResults(mappedResults)\n\n\n    })\n  }, [userList])\n\n  return (\n    <>\n      <h1>Thanks for submitting!</h1>\n      <p className=\"results-p\">Here are the results so far. Keep them to yourself until everyone has voted!</p>\n      <div style={{width: '100%'}}>\n        <div style={{display: 'inline-block', width: '50%', textAlign: 'right'}}>\n          {accusedResults.map(({ charName, votes }) => {\n            if (votes < 1) {\n              return\n            }\n            return (\n              <>\n                <span style={{minHeight: '25px'}}>{charName}: </span>\n                <br/>\n              </>\n            )\n          })}\n        </div>\n        <div style={{display: 'inline-block', width: '40%', paddingLeft: '10px'}}>\n          {accusedResults.map(({ charName, votes }) => {\n            if (votes < 1) {\n              return\n            }\n            return (\n              <>\n                <div className=\"accused-bar\" style={{width: `${votes/11*100}%`}}></div>\n                <br/>\n              </>\n            )\n          })}\n        </div>\n      </div>\n    </>\n  )\n}","import React from 'react'\n\n\nexport default function Voted({ setShowVoted, userList }) {\n  return (\n    <div className=\"voted-container\" style={{position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, backgroundColor: '#282c34'}}>\n      <button onClick={() => setShowVoted(false)}>X</button>\n      <ul>\n        {userList.map((user) => {\n          return <li className={user.hasSubmittedSurvey ? 'submitted' : ''}>{user.player}{user.hasSubmittedSurvey ? `: ${user.votedFor}` : ''}</li>\n        })}\n      </ul>\n    </div>\n  )\n}","import React, { useEffect, useState } from 'react'\nimport Survey from './Survey'\nimport Accused from './Accused'\nimport Voted from './Voted.js'\nimport { firebase } from '../services'\n\nconst database = firebase.database()\n\n\nexport default function UserView({ userData, setIsLoading, showVoted, setShowVoted }) {\n  const [ userList, setUserList ] = useState([])\n\n  useEffect(() => {\n    setIsLoading(true)\n\n    database.ref('users').once('value', (snapshot) => {\n      setUserList(Object.values(snapshot.val()))\n\n      setIsLoading(false)\n    })\n\n    database.ref('users').on('child_changed', (snapshot) => {\n      const newValue = snapshot.val();\n      let userInUserList = userList.find(user => user.uid === newValue.uid);\n      userInUserList = newValue\n    })\n  }, [])\n\n  return (\n    <>\n      {showVoted && \n        <Voted setShowVoted={setShowVoted} userList={userList} />\n      }\n      {\n        userData.hasSubmittedSurvey ?\n\n          <Accused userList={userList} />\n\n          :\n\n          <Survey userData={userData} userList={userList} />\n\n      }\n    </>\n  )\n}","import React, { useEffect, useState } from 'react'\nimport './App.css'\nimport { firebase } from './services'\nimport EnterUserCode from './components/EnterUserCode'\nimport UserView from './components/UserView'\n\nconst database = firebase.database()\n\n\nfunction App() {\n  const [ isLoading, setIsLoading ] = useState(true)\n  const [ hasUser, setHasUser ] = useState(false)\n  const [ userData, setUserData ] = useState({})\n  const [ showVoted, setShowVoted ] = useState(false)\n\n  useEffect(() => {\n    const localStorageUserId = localStorage.getItem('mmp-user-id')\n    \n    if (localStorageUserId) {\n      loadUser(localStorageUserId)\n    }\n\n    setIsLoading(false)\n  }, [])\n\n  function loadUser(userCode, setErrorCallback, e) {\n    if (e) {\n      e.preventDefault()\n    }\n\n    if (userCode) {\n      database.ref(`users/${userCode}`).on('value', (snapshot) => {\n        const userValue = snapshot.val()\n\n        if (snapshot.val()) {\n          setUserData(userValue)\n          setHasUser(true)\n          localStorage.setItem('mmp-user-id', userCode)\n        } else {\n          setErrorCallback('Please check your code and try again')\n        }\n      })\n    } else {\n      setErrorCallback('Please enter a code before submitting')\n    }\n\n  }\n\n  function logout() {\n    setHasUser(false)\n    localStorage.removeItem('mmp-user-id')\n  }\n\n  return (\n    <>\n      {\n        hasUser &&\n        <header>\n\n          {\n            userData.player === 'Pemo' &&\n\n            <button onClick={() => setShowVoted(true)} className=\"see-voted\">See who has voted</button>\n          }\n\n          <button className=\"logout\" onClick={logout}>Log out</button>\n          \n        </header>\n      }\n      <main>\n        {isLoading ? \n\n          <p>Loading...</p>\n          \n          :\n\n          hasUser ?\n\n          <UserView userData={userData} setIsLoading={setIsLoading} setShowVoted={setShowVoted} showVoted={showVoted}/>\n\n          :\n\n          <EnterUserCode loadUser={loadUser} />\n\n        }\n      </main>\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// This app requires a connection to firebase, so offline is not an option\nserviceWorker.unregister()\n"],"sourceRoot":""}